package bonus;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The Analyzer is to calculate the average response time for a given time interval bucket
 */
public class Analyzer {

  private static final int THREAD_NUM = 256;
  private static final long INTERVAL_BUCKET_RANGE = 1000;

  /**
   * The entry point of application.
   *
   * @param args the input arguments
   */
  public static void main(String[] args) {
    System.out.println("Analysis begin....");
    Analyzer analyzer = new Analyzer();
    String srcFileName = "stats/csv_threads_" + THREAD_NUM + ".csv";
    String desFileName =
        "stats_bonus/csv_threads_" + THREAD_NUM + "_interval_" + INTERVAL_BUCKET_RANGE + ".csv";
    List<String[]> records = analyzer.read(srcFileName);
    List<Integer> aveLatencyList = analyzer.analysis(records, INTERVAL_BUCKET_RANGE);
    analyzer.write(desFileName, aveLatencyList, INTERVAL_BUCKET_RANGE);
    System.out.println("Analysis Complete....");
  }

  /**
   * Write the average response time for a given time interval bucket to CSV file
   *
   * @param fileName            the file name
   * @param aveResponseTimeList the response time for a given time
   * @param intervalBucketRange the interval range
   */
  public void write(String fileName, List<Integer> aveResponseTimeList, long intervalBucketRange) {
    CSVWriter writer = null;
    try {
      writer = new CSVWriter(new FileWriter(fileName));
      for (int i = 0; i < aveResponseTimeList.size(); i++) {
        int aveResponseTime = aveResponseTimeList.get(i);
        writer.writeNext(new String[]{String.valueOf((i * intervalBucketRange) / 1000),
            String.valueOf(aveResponseTime)});
      }
      writer.flush();

    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if (writer != null) {
        try {
          writer.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
  }

  /**
   * Read Records data from cvs file which was generated by part2
   *
   * @param fileName the file name
   * @return the list
   */
  public List<String[]> read(String fileName) {
    List<String[]> records = new ArrayList<>();
    CSVReader reader = null;
    try {
      reader = new CSVReader(new FileReader(fileName));
      String[] line = null;
      while ((line = reader.readNext()) != null) {
        if (line == null
            || line[0] == null
            || line[1] == null
            || line[2] == null
            || line[3] == null
            || "".equals(line[0])
            || "".equals(line[1])
            || "".equals(line[2])
            || "".equals(line[3])) {
          continue;
        }
        records.add(line);
      }

    } catch (IOException | CsvException e) {
      e.printStackTrace();
    } finally {
      if (reader != null) {
        try {
          reader.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    return records;
  }

  /**
   * Analysis and calculate the average response time for a given time interval bucket
   *
   * @param records       the records
   * @param intervalRange the interval range
   * @return the list
   */
  public List<Integer> analysis(List<String[]> records, long intervalRange) {
    List<Integer> aveResponseTimeList = new ArrayList<>();
    long intervalInitTime = Long.parseLong(records.get(0)[0]);
    long intervalTotalLatency = Long.parseLong(records.get(0)[2]);
    long intervalReqsCount = 1;
    for (int i = 1; i < records.size(); i++) {
      long curTime = Long.parseLong(records.get(i)[0]);
      if (curTime - intervalInitTime > intervalRange) {
        int averageLatency = (int) (intervalTotalLatency / intervalReqsCount);
        aveResponseTimeList.add(averageLatency);
        intervalInitTime = Long.parseLong(records.get(i)[0]);
        intervalTotalLatency = Long.parseLong(records.get(i)[2]);
        intervalReqsCount = 1;
      } else {
        intervalTotalLatency += Long.parseLong(records.get(i)[2]);
        intervalReqsCount++;
      }
    }
    int averageLatency = (int) (intervalTotalLatency / intervalReqsCount);
    aveResponseTimeList.add(averageLatency);
    return aveResponseTimeList;
  }
}
